#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// --- PENGATURAN WIFI & MQTT (WAJIB DIUBAH) ---
const char* ssid = "Punten"; // Ganti dengan nama WiFi Anda
const char* password = "Adolfhitler"; // Ganti dengan password WiFi Anda
const char* mqtt_server = "192.168.1.2"; // Alamat IP server/broker MQTT Anda
const int mqtt_port = 1883; // Port standar MQTT

// --- PENGATURAN SENSOR ---
#define PIN_TRIG D1 // Pin Trig HC-SR04 terhubung ke D1
#define PIN_ECHO D2 // Pin Echo HC-SR04 terhubung ke D2

// Nilai tinggi wadah sudah diubah sesuai pengukuran Anda.
const float tinggiWadahCm = 13.24; 

// --- DEKLARASI GLOBAL ---
WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);
  
  // Konfigurasi pin sensor
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  
  // Memulai koneksi WiFi
  setup_wifi();
  
  // Mengatur server MQTT
  client.setServer(mqtt_server, mqtt_port);
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Menghubungkan ke ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("WiFi terhubung!");
  Serial.print("Alamat IP ESP8266: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  // Loop sampai berhasil terhubung kembali
  while (!client.connected()) {
    Serial.print("Mencoba koneksi MQTT...");
    // Membuat client ID acak
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    
    // Mencoba terhubung
    if (client.connect(clientId.c_str())) {
      Serial.println("terhubung!");
    } else {
      Serial.print("gagal, rc=");
      Serial.print(client.state());
      Serial.println(" coba lagi dalam 5 detik");
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop(); // Wajib ada untuk menjaga koneksi MQTT

  // 1. Mengukur jarak ke permukaan air
  digitalWrite(PIN_TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(PIN_TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(PIN_TRIG, LOW);
  
  long durasi = pulseIn(PIN_ECHO, HIGH);
  float jarakKeAirCm = durasi * 0.034 / 2;

  // 2. Menghitung ketinggian air
  float tinggiAirCm = tinggiWadahCm - jarakKeAirCm;
  
  // Memastikan nilai tidak negatif jika pengukuran salah
  if (tinggiAirCm < 0) {
    tinggiAirCm = 0;
  }
  // Memastikan nilai tidak melebihi tinggi wadah
  if (tinggiAirCm > tinggiWadahCm) {
    tinggiAirCm = tinggiWadahCm;
  }

  Serial.print("Jarak ke permukaan air: ");
  Serial.print(jarakKeAirCm);
  Serial.println(" cm");

  Serial.print("Ketinggian air: ");
  Serial.print(tinggiAirCm);
  Serial.println(" cm");

  // 3. Mengirim data via MQTT
  client.publish("sensor/waterlevel", String(tinggiAirCm).c_str(), true);
  
  Serial.println("Data terkirim ke MQTT Broker.");
  Serial.println("---------------------------------");

  // Jeda sebelum pengukuran berikutnya
  delay(5000); // Mengirim data setiap 5 detik
}